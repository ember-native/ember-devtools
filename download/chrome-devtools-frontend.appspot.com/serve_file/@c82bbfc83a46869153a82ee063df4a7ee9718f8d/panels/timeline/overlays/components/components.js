import*as e from"../../../../ui/components/helpers/helpers.js";import*as t from"../../../../ui/lit-html/lit-html.js";import*as n from"../../../../core/i18n/i18n.js";import*as i from"../../../../models/trace/trace.js";const s=new CSSStyleSheet;s.replaceSync(":host{display:flex;width:100%;height:100%}\n/*# sourceURL=entriesLinkOverlay.css */\n");class r extends HTMLElement{static litTagName=t.literal`devtools-entries-link-overlay`;#e=this.attachShadow({mode:"open"});#t=this.#n.bind(this);#i;#s;#r=null;#a=null;constructor(e){super(),this.#n(),this.#i=e,this.#s=e,this.#r=this.#e.querySelector(".connectorContainer")??null,this.#a=this.#r?.querySelector("line")??null}connectedCallback(){this.#e.adoptedStyleSheets=[s]}set coordinateFrom(e){this.#i=e,this.#l()}set coordinateTo(e){this.#s=e,this.#l()}#l(){this.#a?(this.#a.setAttribute("x1",this.#i.x.toString()),this.#a.setAttribute("y1",this.#i.y.toString()),this.#a.setAttribute("x2",this.#s.x.toString()),this.#a.setAttribute("y2",this.#s.y.toString()),this.#a.setAttribute("stroke","black"),this.#a.setAttribute("stroke-width","2"),e.ScheduledRender.scheduleRender(this,this.#t)):console.error("`connector` element is missing.")}#n(){t.render(t.html`
          <svg class="connectorContainer" width="100%" height="100%">
            <defs>
              <marker
                id='arrow'
                orient="auto"
                markerWidth='3'
                markerHeight='4'
                refX='4'
                refY='2'>
                <path d='M0,0 V4 L4,2 Z' fill="black" />
              </marker>
            </defs>
            <line marker-end='url(#arrow)'/>
          </svg>
        `,this.#e,{host:this})}}customElements.define("devtools-entries-link-overlay",r);var a=Object.freeze({__proto__:null,EntriesLinkOverlay:r});const l=new CSSStyleSheet;l.replaceSync(".label-parts-wrapper{transform:translate(-50%);display:flex;flex-direction:column;color:var(--color-selected-option);align-items:center}.label-box{pointer-events:auto;background-color:var(--sys-color-token-variable);border-radius:4px;font-family:var(--monospace-font-family);font-weight:bold;white-space:nowrap}.label-box:focus{background-color:var(--color-selected-option);color:var(--sys-color-token-variable)}.connectorContainer{overflow:visible}.entry-highlight-wrapper{box-sizing:border-box;border:2px solid var(--sys-color-token-variable);border-radius:7px}\n/*# sourceURL=entryLabelOverlay.css */\n");class o extends Event{static eventName="emptyentrylabelremoveevent";constructor(){super(o.eventName)}}class h extends Event{newLabel;static eventName="entrylabelchangeevent";constructor(e){super(h.eventName),this.newLabel=e}}class c extends HTMLElement{static LABEL_AND_CONNECTOR_SHIFT_LENGTH=8;static LABEL_CONNECTOR_HEIGHT=7;static LABEL_HEIGHT=17;static LABEL_PADDING=4;static LABEL_AND_CONNECTOR_HEIGHT=c.LABEL_HEIGHT+2*c.LABEL_PADDING+c.LABEL_CONNECTOR_HEIGHT;static MAX_LABEL_LENGTH=100;static litTagName=t.literal`devtools-entry-label-overlay`;#e=this.attachShadow({mode:"open"});#t=this.#n.bind(this);#o=!0;#h=null;#c=null;#d=null;#b=null;#r=null;#p;#u;constructor(e,t){super(),this.#n(),this.#c=this.#e.querySelector(".label-parts-wrapper"),this.#d=this.#c?.querySelector(".label-box")??null,this.#r=this.#c?.querySelector(".connectorContainer")??null,this.#b=this.#c?.querySelector(".entry-highlight-wrapper")??null,this.#p=e,this.#u=t,this.#y(e),this.#g()}connectedCallback(){this.#e.adoptedStyleSheets=[l]}#x(){const e=this.#d?.textContent??"";e!==this.#p&&(this.#p=e,this.dispatchEvent(new h(this.#p)))}#m(e){if(!this.#d)return!1;return"Enter"===e.key||"Escape"===e.key?(this.#d.dispatchEvent(new FocusEvent("blur",{bubbles:!0})),!1):null!==this.#d.textContent&&this.#d.textContent.length<=c.MAX_LABEL_LENGTH||(!!["Backspace","Delete","ArrowLeft","ArrowRight"].includes(e.key)||(!(1!==e.key.length||!e.ctrlKey)||(e.preventDefault(),!1)))}#v(e){e.preventDefault();const t=e.clipboardData;if(!t||!this.#d)return;const n=t.getData("text"),i=(this.#d.textContent+n).slice(0,c.MAX_LABEL_LENGTH+1);this.#d.textContent=i;const s=window.getSelection(),r=document.createRange();r.selectNodeContents(this.#d),r.collapse(!1),s?.removeAllRanges(),s?.addRange(r)}set entryLabelParams(t){t.height===this.#h?.height&&t.width===this.#h?.width&&t.cutOffEntryHeight===this.#h?.cutOffEntryHeight||(this.#h=t,e.ScheduledRender.scheduleRender(this,this.#t),this.#L())}#g(){if(!this.#r)return void console.error("`connectorLineContainer` element is missing.");const e=this.#r.querySelector("line"),t=this.#r.querySelector("circle");e&&t?(this.#r.setAttribute("width",(2*c.LABEL_AND_CONNECTOR_SHIFT_LENGTH).toString()),this.#r.setAttribute("height",c.LABEL_CONNECTOR_HEIGHT.toString()),e.setAttribute("x1","0"),e.setAttribute("y1","0"),e.setAttribute("x2",c.LABEL_AND_CONNECTOR_SHIFT_LENGTH.toString()),e.setAttribute("y2",c.LABEL_CONNECTOR_HEIGHT.toString()),e.setAttribute("stroke","black"),e.setAttribute("stroke-width","2"),t.setAttribute("cx",c.LABEL_AND_CONNECTOR_SHIFT_LENGTH.toString()),t.setAttribute("cy",c.LABEL_CONNECTOR_HEIGHT.toString()),t.setAttribute("r","3"),t.setAttribute("fill","black")):console.error("Some entry label elements are missing.")}#y(e){this.#d?(this.#d.innerText=e,this.#d.style.height=`${c.LABEL_HEIGHT}px`,this.#d.style.padding=`${c.LABEL_PADDING}px`,this.#d.style.transform=`translateX(-${c.LABEL_AND_CONNECTOR_SHIFT_LENGTH}px)`,""!==e&&this.#w(!1)):console.error("`labelBox` element is missing.")}#L(){if(!(this.#b&&this.#h&&this.#d&&this.#r))return void console.error("Some elements required to draw `entryHighlightWrapper` are missing.");const{height:e,width:t,cutOffEntryHeight:n}=this.#h;this.#u?(this.#d.style.visibility=n>0?"hidden":"visible",this.#r.style.visibility=n>0?"hidden":"visible",this.#b.style.borderTopWidth=n>0?"0":"2px"):this.#b.style.borderBottomWidth=n>0?"0":"2px",this.#b.style.height=e-n+"px",this.#b.style.width=`${t}px`,this.#o&&this.#f()}#f(){this.#d?this.#d.focus():console.error("`labelBox` element is missing.")}#w(e){this.#o=e,this.#n(),e&&this.#f(),e||0!==this.#d?.innerText.length||this.dispatchEvent(new o)}#n(){t.render(t.html`
        <span class="label-parts-wrapper">
          <span
            class="label-box"
            @dblclick=${()=>this.#w(!0)}
            @blur=${()=>this.#w(!1)}
            @keydown=${this.#m}
            @paste=${this.#v}
            @keyup=${this.#x}
            contenteditable=${this.#o}>
          </span>
          <svg class="connectorContainer">
            <line/>
            <circle/>
          </svg>
          <div class="entry-highlight-wrapper"/>
        </span>`,this.#e,{host:this})}}customElements.define("devtools-entry-label-overlay",c);var d=Object.freeze({__proto__:null,EmptyEntryLabelRemoveEvent:o,EntryLabelChangeEvent:h,EntryLabelOverlay:c});const b=new CSSStyleSheet;b.replaceSync(":host{display:flex;overflow:hidden;flex-direction:column;justify-content:flex-end;width:100%;height:100%;box-sizing:border-box;padding-bottom:5px}.label{font-style:italic;text-align:center;box-sizing:border-box;width:max-content;max-width:250px;padding:0 3px;pointer-events:all;user-select:none;&.labelHidden{user-select:none;pointer-events:none;visibility:hidden}&.offScreenLeft{text-align:left}&.offScreenRight{text-align:right}}.label-text{text-overflow:ellipsis;max-height:40px;overflow:hidden;display:-webkit-box;white-space:break-spaces;-webkit-line-clamp:2;-webkit-box-orient:vertical}\n/*# sourceURL=timeRangeOverlay.css */\n");class p extends Event{newLabel;static eventName="timerangelabelchange";constructor(e){super(p.eventName),this.newLabel=e}}class u extends Event{static eventName="timerangeremoveevent";constructor(){super(u.eventName)}}class y extends HTMLElement{static litTagName=t.literal`devtools-time-range-overlay`;#e=this.attachShadow({mode:"open"});#t=this.#n.bind(this);#E=null;#R=null;#p;#o=!0;#S=null;#d=null;connectedCallback(){this.#e.adoptedStyleSheets=[b]}constructor(e){super(),this.#n(),this.#S=this.#e.querySelector(".label"),this.#d=this.#S?.querySelector(".label-text")??null,this.#p=e,this.#d?this.#d.innerText=e:console.error("`labelBox` element is missing.")}set canvasRect(t){this.#R=t,e.ScheduledRender.scheduleRender(this,this.#t)}set duration(t){t!==this.#E&&(this.#E=t,e.ScheduledRender.scheduleRender(this,this.#t))}#C(e){if(!this.#R)return 0;const{x:t,width:n}=e,i=t+n,s=this.#R.x,r=this.#R.x+this.#R.width,a=Math.max(s,t);return Math.min(r,i)-a}afterOverlayUpdate(){if(!this.#S)return;if(!this.#R)return;const e=this.getBoundingClientRect(),t=this.#S.getBoundingClientRect(),n=this.#C(e)-9<=t.width-9;if(this.#S.classList.toggle("labelHidden",n),n)return;const i=(e.width-t.width)/2,s=e.x+i<this.#R.x;this.#S.classList.toggle("offScreenLeft",s);const r=this.#R.x+this.#R.width,a=e.x+i+t.width>r;if(this.#S.classList.toggle("offScreenRight",a),s)this.#S.style.marginLeft=`${Math.abs(this.#R.x-e.x)+9}px`;else if(a){const n=r-t.width-e.x;this.#S.style.marginLeft=`${n}px`}else this.#S.style.marginLeft=`${i}px`;""===this.#d?.innerText&&this.#B(!0)}#f(){this.#d?this.#d.focus():console.error("`labelBox` element is missing.")}#B(e){""!==this.#d?.innerText?(this.#o=e,this.#n(),e&&this.#f()):this.#f()}#x(){const e=this.#d?.textContent??"";e!==this.#p&&(this.#p=e,this.dispatchEvent(new p(this.#p)))}#m(e){return"Enter"!==e.key&&"Escape"!==e.key||(""===this.#p&&this.dispatchEvent(new u),this.#d?.blur(),!1)}#n(){const e=this.#E?n.TimeUtilities.formatMicroSecondsTime(this.#E):"";t.render(t.html`
          <span
            class="label">
            <span
             class="label-text"
             @focusout=${()=>this.#B(!1)}
             @dblclick=${()=>this.#B(!0)}
             @keydown=${this.#m}
             @keyup=${this.#x}
             contenteditable=${this.#o}>
            </span>
            <span
            class="duration">${e}</span>
          </span>
          `,this.#e,{host:this})}}customElements.define("devtools-time-range-overlay",y);var g=Object.freeze({__proto__:null,TimeRangeLabelChangeEvent:p,TimeRangeRemoveEvent:u,TimeRangeOverlay:y});const x=new CSSStyleSheet;x.replaceSync(":host{display:flex;overflow:hidden;flex-direction:row;justify-content:flex-end;align-items:flex-end;width:100%;box-sizing:border-box}.timespan-breakdown-overlay-section{border:solid;border-color:var(--sys-color-on-surface);border-left-width:1px;border-right-width:1px;border-top-width:4px;border-bottom:none;align-content:flex-start;text-align:center;overflow:hidden;text-overflow:ellipsis;background-image:linear-gradient(180deg,var(--sys-color-on-primary),transparent);height:90px;&:nth-child(odd){height:100px}&:nth-child(even){border-left-width:0;border-right-width:0}&:first-child{border-left-width:1px}&:last-child{border-right-width:1px}}.timespan-breakdown-overlay-label{font-family:var(--default-font-family);font-size:var(--sys-typescale-body2-size);line-height:var(--sys-typescale-body4-line-height);font-weight:var(--ref-typeface-weight-medium);color:var(--sys-color-on-surface);text-align:center;box-sizing:border-box;width:max-content;padding:0 3px;overflow:hidden;text-overflow:ellipsis;text-wrap:nowrap;.duration-text{text-overflow:ellipsis;overflow:hidden;text-wrap:nowrap;display:block}&.labelHidden{user-select:none;pointer-events:none;visibility:hidden}&.labelTruncated{max-width:100%}&.offScreenLeft{text-align:left}&.offScreenRight{text-align:right}}\n/*# sourceURL=timespanBreakdownOverlay.css */\n");class m extends HTMLElement{static litTagName=t.literal`devtools-timespan-breakdown-overlay`;static TIMESPAN_BREAKDOWN_OVERLAY_STAGGER_PX=5;#e=this.attachShadow({mode:"open"});#t=this.#n.bind(this);#R=null;#T=null;connectedCallback(){this.#e.adoptedStyleSheets=[x],this.#n()}set canvasRect(t){this.#R=t,e.ScheduledRender.scheduleRender(this,this.#t)}set sections(t){t!==this.#T&&(this.#T=t,e.ScheduledRender.scheduleRender(this,this.#t))}afterOverlayUpdate(){const e=this.#e.querySelectorAll(".timespan-breakdown-overlay-section");if(!e)return;if(!this.#R)return;const t=new Map;for(const n of e){const e=n.querySelector(".timespan-breakdown-overlay-label");if(!e)continue;const i=n.getBoundingClientRect(),s=e.getBoundingClientRect();t.set(n,{sectionRect:i,labelRect:s,label:e})}for(const n of e){const e=t.get(n);if(!e)break;const{labelRect:i,sectionRect:s,label:r}=e,a=s.width<30,l=s.width-5<=i.width;if(r.classList.toggle("labelHidden",a),r.classList.toggle("labelTruncated",l),a||l)continue;const o=(s.width-i.width)/2,h=s.x+o<this.#R.x;r.classList.toggle("offScreenLeft",h);const c=this.#R.x+this.#R.width,d=s.x+o+i.width>c;if(r.classList.toggle("offScreenRight",d),h)r.style.marginLeft=`${Math.abs(this.#R.x-s.x)+9}px`;else if(d){const e=c-i.width-s.x;r.style.marginLeft=`${e}px`}else r.style.marginLeft=`${o}px`}}renderSection(e){const s=i.Helpers.Timing.microSecondsToMilliseconds(e.bounds.range);return t.html`
      <div class="timespan-breakdown-overlay-section">
        <div class="timespan-breakdown-overlay-label">
          <span class="duration-text">${n.TimeUtilities.preciseMillisToString(s,2)}</span>
          ${e.label}
        </div>
      </div>`}#n(){t.render(t.html`${this.#T?.map(this.renderSection)}`,this.#e,{host:this})}}customElements.define("devtools-timespan-breakdown-overlay",m);var v=Object.freeze({__proto__:null,TimespanBreakdownOverlay:m});export{a as EntriesLinkOverlay,d as EntryLabelOverlay,g as TimeRangeOverlay,v as TimespanBreakdownOverlay};
